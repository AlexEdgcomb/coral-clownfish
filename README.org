#+Title: Programming competition 5/11/2018

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_title_slide:"<h1>%t</h1>"
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:0
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Programming competition">

* Coral and clownfish
Coral and clownfish is a clone of a popular game called Tents and Trees (found on both the [[https://itunes.apple.com/us/app/tents-and-trees-puzzles/id1279378379?mt=8][Apple app store]],
and [[https://play.google.com/store/apps/details?id=com.frozax.tentsandtrees&hl=en_US][Android play store]])

#+html: <p align="center"><img src="images/app.png" /></p>

** Goal of game
The goal of Coral and Clownfish is to save the reef and determine where the clownfish should be placed.

#+html: <p align="center"><img src="images/starting-screen.png" /></p>

** Clownfish can be placed subject to some rules.
*** 1) Each piece of coral needs at least one clownfish connected to it.
#+html: <p align="center"><img src="images/rule1-yes.png" /></p>
*** Do not leave a straggling coral behind
#+html: <p align="center"><img src="images/rule1-no.png" /></p>
*** 2) Each clownfish is connected to a coral either horizontally or vertically.
#+html: <p align="center"><img src="images/rule2-yes.png" /></p>
*** Fish can't help coral diagonally
#+html: <p align="center"><img src="images/rule2-no.png" /></p>
*** 3) Clownfish need their space and should not be adjacent to each other.
#+html: <p align="center"><img src="images/rule3-yes.png" /></p>
*** Vertically, horizontally, or diagonally
#+html: <p align="center"><img src="images/rule3-no.png" /></p>

*** 4) Row/column constraints.
Each row and column has a specfic number of fish, defined by constraints.
#+html: <p align="center"><img src="images/rule4-yes.png" /></p>
*** All constraints must be satisfied to win.
#+html: <p align="center"><img src="images/rule4-no.png" /></p>

*** 5) All cells must be filled in.
#+html: <p align="center"><img src="images/rule5-yes.png" /></p>
*** Correct fish placement, but not all cells filled in.
#+html: <p align="center"><img src="images/rule5-no.png" /></p>

* Programming competition
The original game provides a button to provide a suggestion when stuck.
#+html: <p align="center"><img src="images/tents-suggester.jpg" /></p>

** Write your own
The goal of this competition is to write a suggester to provide a suggestion for what cell to click next.
I have written a basic framework to write a suggestion algorithm given a board state, and your goal will be to write
a suggester to plug in.
** Suggester engine
#+html: <p align="center"><img src="images/suggester.png" /></p>
** Task
Write a suggester that when plugged in can solve all the provided games. It doesn't necessarily matter how many moves it requires,
but it should be able to solve the game effectively unassisted but pressing "Make suggestion" N times (within reason)
*** Step 1 - Fork my github repo
https://github.com/ssirowy/coral-clownfish
#+html: <p align="center"><img src="images/github.png" /></p>
*** Step 2 - Write a new suggester
At its heart, you are really going to implement one method.
#+BEGIN_SRC javascript
    /**
       Overridden method of base class. Will return a random cell to click.
       @method nextSuggestion
       @param {Game} Game object
       @return {Cell}
    */
    nextSuggestion(game) {

        const size = game.board.length - 1;
        let row, column  = 0;

        // Pick a non coral cell
        do {
            row = this._getRandomInt(1, size);
            column = this._getRandomInt(1, size);
        } while (game.board[row][column].type == 'coral');

        return new CellSuggestion(row, column);
    }
#+END_SRC
*** Step 3 - Demonstrate that it can solve all the defined games!
#+html: <p align="center"><img src="images/games.png" /></p>

* Board state
  For a board for size N, The board is represented as an (N+1)*(N+1) 2D array
  where the row and column constraints are also represnted as cells.
  #+html: <p align="center"><img src="images/board.png" /></p>

** Board state types
   Constraint cells with be 0-indexed. Clickable board cells are effectively 1-indexed.
#+BEGIN_SRC javascript
// Constraint cell
{
    type: 'constraint',
    value: 5,
}

// Actual board cell
{
    type: 'empty',  // might also take on 'clownfish', 'water', or 'coral'
}
#+END_SRC

* Setup
This game is built using [[https://reactjs.org/][React]] and a couple of extra small libraries.  The game also uses [[https://redux.js.org/][Redux]] to maintain state.  You won't really
need to know how most of the app is working in order to write a suggester.  You can just write basic Javascript to complete the
competition part, but feel free to poke around the code and figure out what this game is doing. This is my first React app,
so not everything may be up to code (pun intended),  but I tried to employ the basic patterns as defined in the docs.

** Prerequisites
1. [[http://git-scm.com/][Git]]
2. [[http://nodejs.org/][Node and NPM]]

Thats it!

** Installation

1. Clone this repository.
#+BEGIN_SRC bash
git clone git@github.com:ssirowy/coral-clownfish.git
#+END_SRC

2. Download all dependencies.
#+BEGIN_SRC bash
cd coral-clownfish
npm install
#+END_SRC

3. Run the game
#+BEGIN_SRC bash
npm start
#+END_SRC
